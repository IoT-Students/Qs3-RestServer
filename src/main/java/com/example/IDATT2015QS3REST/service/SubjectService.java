package com.example.IDATT2015QS3REST.service;

import com.example.IDATT2015QS3REST.controller.LoginController;
import com.example.IDATT2015QS3REST.model.Subject;
import com.example.IDATT2015QS3REST.repository.SubjectRepository;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * A service class for SubjectService
 */
@Service
public class SubjectService {

    @Autowired
    SubjectRepository subjectRepository;

    private static final Logger LOGGER = LogManager.getLogger(SubjectService.class);

    /**
     * A method for adding a subject. A subject needs a code, name, total amount of assignments,
     * required assignments. A subjectId will be autogenerated, and the queue size is set to zero.
     * @param subject
     * @return status as a integer
     */
    public int addSubject(Subject subject) {
        LOGGER.info("Service: Adding new subject");
        return subjectRepository.addSubject(subject);
    }

    /**
     * A method for fetching all the subjects to a user. It is used for students, teachers
     * and student a ssistance
     * @param id The id for the user
     * @return A list with all the subjects to a user
     */
    public List<Subject> getAllSubjects(int id){
        LOGGER.info("Service: Fetching all subjects");
        List<Subject> subjectsWithoutSize = new ArrayList<Subject>();
        List<Subject> subjects = new ArrayList<Subject>();

        subjectRepository.getAllSubjects(id).forEach(subjectsWithoutSize::add);

        for (int i = 0; i < subjectsWithoutSize.size(); i++) {
            int queueSize = subjectRepository.getQueueSize(subjectsWithoutSize.get(i).getSubjectId());
            int response = subjectRepository.setQueueSize(subjectsWithoutSize.get(i).getSubjectId(), queueSize);
            System.out.println("Size fra service: " + queueSize);
        }

        subjectRepository.getAllSubjects(id).forEach(subjects::add);

        return subjects;
    }
}
